name: Build and Push Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Decode GCP service account key
        env:
          GCP_SA_KEY_BASE64: ${{ secrets.GCP_SA_KEY_BASE64 }}
        run: |
          echo "$GCP_SA_KEY_BASE64" | base64 --decode > gcp-key.json
          cat gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json

      - name: Check gcloud info
        run: |
          gcloud config list

      - name: Set up GCloud
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY_BASE64 }}
          export_default_credentials: true

      - name: Authenticate to GCR
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build . -t us-central1-docker.pkg.dev/novaferi/kb-node-v1/kb-nodeapp:${{ github.sha }}
          docker push us-central1-docker.pkg.dev/novaferi/kb-node-v1/kb-nodeapp:${{ github.sha }}

      - name: Install gcloud and kubectl
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk kubectl

      - name: Set up K8s config
        run: |
            sudo mkdir -p $HOME/.kube
            echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 --decode | sudo tee $HOME/.kube/config
            sudo chown -R $USER $HOME/.kube
            export KUBECONFIG=$HOME/.kube/config
  
      - name: Install gke-gcloud-auth-plugin for kubectl
        run: |
            gcloud components install kubectl

      - name: Create Namespace
        run: |
            exists=$(kubectl get namespace kb-node-minikube-cluster --no-headers --output=custom-columns=:metadata.name 2>/dev/null || true)
            if [[ -n "$exists" ]]; then
              echo "Namespace kb-node-minikube-cluster already exists"
              exit 0
            else
              echo "Namespace kb-node-minikube-cluster does not exist, proceeding with creation"
              kubectl create namespace kb-node-minikube-cluster
            fi
  
      - name: Deploy to Kubernetes
        run: |
            kubectl apply -f ./k8s/base/kb-node-app/deployment.yaml
            kubectl apply -f ./k8s/base/kb-node-app/service.yaml
            kubectl apply -f ./k8s/base/redis/deployment.yaml
            kubectl apply -f ./k8s/base/redis/service.yaml
            kubectl apply -f ./k8s/base/redis/pvc.yaml
  
      - name: Update Deployment Image and Check Rollout
        run: |
          kubectl set image deployment/kbnode-app kbnode-app=us-central1-docker.pkg.dev/novaferi/kb-node-v1/kbnodeapp:${{ github.sha }} --record
          timeout=60 # Timeout in seconds
          end=$((SECONDS+timeout))
          while true; do
            if kubectl rollout status deployment/kbnode-app --timeout=10s; then
              echo "Deployment successful."
              break
            fi
            if [[ "${SECONDS}" -ge "${end}" ]]; then
              echo "Deployment failed to stabilize within ${timeout} seconds."
              kubectl rollout undo deployment kbnode-app
              echo "Rolled back deployment."
              exit 1
            fi
            sleep 5
          done